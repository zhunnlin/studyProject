import{_ as s,o as c,c as d,p as l,m as a,k as e,H as n,Q as r}from"./chunks/framework.cef52c84.js";const _="/studyProject/assets/wx.8a109e9e.jpeg",p="/studyProject/assets/qq.6822486e.jpeg";const u={},t=o=>(l("data-v-285e6570"),o=o(),a(),o),h={class:"concat"},m=t(()=>e("p",null,[e("span",null,"微信"),e("img",{src:_,alt:"wx",title:"wx"})],-1)),b=t(()=>e("p",null,[e("span",null,"QQ"),e("img",{src:p,alt:"qq",title:"qq"})],-1)),f=[m,b];function k(o,i){return c(),d("div",h,f)}const v=s(u,[["render",k],["__scopeId","data-v-285e6570"]]),g=r('<h3 id="无需人工操作的博客" tabindex="-1">无需人工操作的博客 <a class="header-anchor" href="#无需人工操作的博客" aria-label="Permalink to &quot;无需人工操作的博客&quot;">​</a></h3><ul><li><p><code>技术点</code></p><ul><li><code>GitHub Pages</code></li><li><code>Github Action</code></li><li><code>NodeJs</code> <code>fs</code>, <code>path</code>, <code>cheerio</code>, <code>moment</code>, <code>nodemailer</code></li><li><code>vitepress</code></li></ul></li><li><p><code>实现</code></p><ul><li>使用 <code>vitepress</code> 把前期的博客搭建完成</li><li>准备好一个 sidebar json 文件, 用于写入当天的侧边栏</li><li>准备一个更新侧边栏的函数, 用于获取当前的侧边栏列表和新增侧边栏功能, 主要是用到 path, fs 模块, (因为 <code>vitepress</code> 是打包之后才会去生成侧边栏, 本地调试不会立即更新, 需要触发 github workflow 之后才会重新更新)</li><li>获取<a href="https://github.com/trending/javascript?since=daily" target="_blank" rel="noreferrer">github trending 排行</a>. <ul><li>第一步要做的时候是先去调用 updateSidebar 函数去更新侧边栏</li><li>第二步通过<code>axios</code>去解析<code>github trending</code>中的<code>DOM</code>,这里用到了<code>cheerio</code>, 获取到每日的<code>25</code>条最新的技术并放到一个数组中</li><li>第三步通过遍历数组, 进行<code>markdown</code>格式的文档拼接</li><li>第四步通过<code>fs</code>模块生成对应天数的<code>markdown</code>文档并写入到对应的目录下面</li><li>最后通过<code>Github Workflow</code>进行<code>定时触发</code>, <code>设置系统和环境变量</code>,进行打包并通过<code>Github Pages</code>将其部署到 <code>github pages</code>中</li></ul></li></ul></li><li><p><code>github workflow</code></p><ol><li><code>jobs</code>: 这是一个 <code>Workflow</code> 中的主要部分，用于定义一个或多个工作<code>（jobs）</code>。每个工作是一组并行运行的任务步骤，可以在不同的运行环境中执行。</li><li><code>name</code>: 这是一个工作的名称，用于标识不同的工作。它通常用于在 <code>Workflow</code> 页面和日志中显示工作的名称。</li><li><code>runs-on</code>: 这个字段用于指定工作运行的操作系统环境。你可以选择不同的操作系统，如 <code>ubuntu-latest、windows-latest、macos-latest</code> 等。</li><li><code>steps</code>: 在一个工作中，steps 定义了一系列要执行的任务步骤。每个步骤执行一个或多个命令。</li><li><code>name</code>: 步骤的名称，用于标识不同的步骤，方便在 <code>Workflow</code> 页面和日志中显示。</li><li><code>run</code>: 在步骤中，run 字段用于定义要执行的命令。这可以是一个单独的命令，也可以是一个脚本文件的路径。</li><li><code>env</code>: 这个字段用于设置环境变量，可以在步骤中使用。它可以是一个键值对的集合，例如 <code>env</code>: MY_VARIABLE: &#39;my_value&#39;。</li><li>us<code>es: 使用一个已有的 </code>action` 来执行特定的任务。Actions 是一种可重用的、自包含的任务，可以用于多个工作流。</li><li><code>with</code>: 在 <code>uses</code> 字段中，<code>with</code> 字段允许你传递参数给使用的 action，这些参数将影响 action 的行为。</li></ol></li></ul><h2 id="关于博主" tabindex="-1">关于博主 <a class="header-anchor" href="#关于博主" aria-label="Permalink to &quot;关于博主&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">姓名</p><p>杜兆林</p></div><div class="info custom-block"><p class="custom-block-title">性别</p><p>男</p></div><div class="info custom-block"><p class="custom-block-title">毕业时间/院校</p><p>2020 年毕业于河南工程学院/机电专业</p></div><div class="info custom-block"><p class="custom-block-title">工作</p><p>自由职业, AIGC创业</p></div>',7),w={class:"tip custom-block"},x=e("p",{class:"custom-block-title"},"联系方式",-1),q=e("p",null,"一起学习",-1),A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"about/index.md","filePath":"about/index.md","lastUpdated":1698323059000}'),P={name:"about/index.md"},I=Object.assign(P,{setup(o){return(i,j)=>(c(),d("div",null,[g,e("div",w,[x,q,n(v)])]))}});export{A as __pageData,I as default};
